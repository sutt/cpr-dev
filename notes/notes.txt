CellPullRequest:

	
Overview / Main Points
------------------------

	
	- need a way to merge only certain cells, otherwise all the progress is overwritten
	
		- unless, we can create a merge strategy which does UNION on exisiting work and new additions
		
	- idea: create a "cool" guid in the cell where you want to receive the teachers-pr. This can be function in CPR-module. Once you have that unique string, in the notebook, merge can navigate and find it. e.g.:
	
		---------------
		In[ ] cpr.public_code(2)
		---------------
		Out[ ] awesome-aardvark-2345
		----------------
		In [ ] 
		----------------
		
			-> now we'll try to merge just below awesome-aardvark-2345 on the students notebook
			
	- Stages of Dev:
		1.) teacher able to push out code to students
		2.) students are able to deliver teacher their code
		
		- nice to haves:
			- most projects will involve a datasets so that will need to be included in the 
			- each student can have one main repo where teacher can sync with students progress
			
		- other things to consider:
			- need to .gitignore large datasets, and ipynb_checkpoints, otherwise it will be a nightmare merge
			- just add/commit the notebook in progress
			
	Marketing Thoughts:
	
		nbx - notebook exchange
		
		to globals: "no more scrolling down"
		
		to locals: pair programming without the clunkiness of working on someone's computer.
		
			- we'll create a wheel that will match people
		
		marketing material: a repo ready to go where you can "play with someone" e.g. it will have some leetcode challenges.
		
Todo:
-------------------------

	12.18
	
	[ ] re-organize notes
	
	[ ] MVP - demo to brianna level
	
		[ ] javascript aspect
			[ ] load_notebook
			[ ] callbacks
			[ ] save_notebook
			[ ] cell.cursor
			[ ] color.animate
			
		[ ] automate some commit-push and commit-pull
		
		[ ] module skeleton
			[ ] teach
			[ ] get_answer
	
	12.17
	
	Thoughts:
	
		The git merge-hook / merge will be a hairy beast to tackle.
		
		It will probably involve liberal overwriting of metadata and using 
			git add --patch 
		to only commit a certain amount of cells (both input and output)

		How to commit before pull, and then push later, at that point you've added a bunch of extraneous cells and meta-data to "receive an answer without overwriting anything", how do you send one back? Maybe by switching branches? Or maybe creating an intermediate representation of the .ipynb strcture?
			-> whatever way, we can concentrate on teacher broadcast mode where commits only move one way.
			
		Ultimately I should concentrate on an MVP where I know the merge will work, and see how well that works before going deeply into the merge portion.
		
		Once we can validate the UX we'll look at how easy it is to break with a live testing exercise.
		
	Sober Thoughts:
	
		Need to do cell-add outside of the full notebook structure. 
		
		An intermediate representation of exchanged cell would be best
		https://stackoverflow.com/questions/21518381/proper-way-to-wait-for-one-function-to-finish-before-continuing
		

	12.16
	
	[x] get a basic reload, scroll example
		-> via setTimeout()
		
	[ ] explore callbacks, make them work here
	
	[ ] where are static [js] files kept in my python environment?
	
	[ ] jquery flash the color?
	
	start looking into git merging and adding patches (only some content from cells)
	
	12.15
	
	[x] put stuff in place for a commit
	
	[x] intellisense for vscode settings
			
	[ ] build an MVP
	
	[ ] build some simple tests like merging conflict example1

	12.15
	
	Thoughts:
	
		One way to get a nice client-side reload after git-pull, is by doing stuff after load_notebook, like reversing the scroll_to_top()
		
		"notebook"/notebook/static/js/scrollmanager.js - has scroll functions
		
		But another way is to write our own extension which mimics the way load_notebook occurs, but changes the bad functionality.

	
	12.14
	
	[x] setup the master git repo for the project
	
	[x] setup the local git-server 
		->resides cpr/remote/main  
		->called remote local in student-cpr and teacher-cpr
		detailed: see notes
			
	
	[ ] setup a testing framework 
	
		[ ] how will we drive changes? maybe just writing the "resultant" json from python instead of using a webdriver on browser to automate jupyter?
	
	[x] setup the module for cpr class
	
	[ ] setup a skeleton for subprocess to git
	
	[ ] investigate libraries for python-git
	
	[ ] create some examples of merge conflicts
	
	[ ] how to do git merge without git-pull?
	
		- for testing processes: we'd operate on files instead repo's; can we go something like that?
	
	[x] try executing window.location.realod() from python
		from IPython.display import Javascript
		Javascript("window.location.reload()")
		
	[ ] copy the pattern in an example nb_ensensions
		
		
	[x] verify the reload command process
	
			[x] compare diffs b/w teacher's book1.ipynb and students' book1.ipynb
				after failed merge
				
				in misc/saved-files as book1-conflicts.ipynb, book1-=good.ipynb
				>git diff --no-index book1-good.ipynb book1-conflicts.ipynb
				
				-> looks like "<<<<<<<<HEAD" is throwing off json
				-> also there was a duplicate 'source' item from teacher writing into cell and student having it blank.
				
	
		[x] find the javascript sources for jupyter
		-> window.location.realod() works to view the newly inserted code, but is clunky and doesn't keep the cursor in position.

			[x] better option for window reloading? -> not at this point
					
				[x] execute those from console
				
		
	
	12.12
	
	[x] set up a dummy remote repo
	[x] open up two terminals, two notebooks, two local repos
	
	[x] understand the delay in RELOAD for notebook
		-> refreshing the page seems to work
	
	[ ] how well do changes to meta-data within a cell work to merge?
		[x] demonstrate some meta-data changing -> need to save from notebook
	
	[x] build a script for add, commit push
	[x] build a script to add, commit, pull
	
	[ ] try a git checkout -- book1.ipynb while live
	
	[x] setup an offline working copy
		
	
	[x] surface some client issues by changing students notebook before the pull
	
	[x] can i run an .sh file in windows terminal?
		->yes, but it shells out and closes too quickly to read
		[x] perhaps it can work for git? -> yes
		
	[x] do i have any extensions installed in base?
		-> a few like conda installed extensions
		


Detailed Notes:
-----------------------------
		
		12.16
		
		Reading List for JSON/Git merge
		
			https://github.com/jonatanpedersen/git-json-merge
			
				good, but in nodejs
			https://stackoverflow.com/questions/33122014/git-conflicts-with-json-files
			
			https://weekly-geekly.github.io/articles/244839/index.html
			
				good, but uses a nodejs library to perform json merges
			
			nbdime:
			https://nbdime.readthedocs.io/en/latest/cli.html#merging
			
				specifically merging
				https://nbdime.readthedocs.io/en/latest/cli.html#merging
			
					key: --union
			
			
		ReadingList for Git Merge Conflicts:
		
			https://wincent.com/wiki/Git_merge_conflict_cheatsheet
						
			
		Reading List JS<->Python
		
		https://stackoverflow.com/questions/16852885/ipython-adding-javascript-scripts-to-ipython-notebook/31750982
		
			- look at the lib argument in Javascript
		http://jakevdp.github.io/blog/2013/06/01/ipython-notebook-javascript-python-communication/
			
			- from 2013, method deprecated
		
		Readlist Extensions
		
			 https://jupyter-notebook.readthedocs.io/en/latest/extending/index.html
		
			https://github.com/ipython-contrib/jupyter_contrib_nbextensions
			
			thouhgts on using extensions:
			- or freeload of exisitng installed extensions like nb_conda
			- or from user-built extensions
			
			notes:
				extensions live both in:
					- lib/site-packages
						(with an __init__.py directing jupyter)
					
					- Anaconda3/share/nbextensions/ 
					
				-> I can't dummy duplicate an extension yet
		
				
	 
			great rundown of everything to know about extending jupyter with examples:
			https://mindtrove.info/4-ways-to-extend-jupyter-notebook/
		
				-  https://forums.fast.ai/t/jupyter-notebook-enhancements-tips-and-tricks/17064/2
		
				- https://www.dataquest.io/blog/advanced-jupyter-notebooks-tutorial/
		
				- something about custom.js is where you can write your own js

		
		
		Examples of extension to scroll to running cell:					
			https://github.com/ipython-contrib/jupyter_contrib_nbextensions/pull/1384/files
			
			How to find the selected cell	from:https://github.com/jupyter/notebook/blob/b8b66332e2023e83d2ee04f83d8814f567e01a4e/docs/source/frontend_config.rst
		
			
		I like these answers to using IPython pakcage in python		
			https://stackoverflow.com/questions/12544056/how-do-i-get-the-current-ipython-jupyter-notebook-name
			
			Look at the paste cell method to find out how to insert cells on the fly.
	 
		
		Messages from the notebooks default behavior:
		
			the pop-up
			<div class="modal-footer"><button class="btn btn-default btn-sm btn-warning" data-dismiss="modal">Reload</button><button class="btn btn-default btn-sm" data-dismiss="modal">Cancel</button><button class="btn btn-default btn-sm btn-danger save-confirm-btn" data-dismiss="modal">Overwrite</button></div>
			
			Error message when merge fails:
			Unreadable Notebook: C:\Users\wsutt\Desktop\cpr\student\student-cpr\book1.ipynb NotJSONError('Notebook does not appear to be JSON: \'{\\n "cells": [\\n {\\n "cell_type": "m...')
			
	
	 
		12.15
		
		+ How to reload the notebook notes:
		
			%%javascript
			var nb_path = IPython.notebook.notebook_path;
			IPython.notebook.load_notebook('misc/books/Untitled.ipynb');
		
			https://stackoverflow.com/questions/12544056/how-do-i-get-the-current-ipython-jupyter-notebook-name
	
				How to go from js -> python within the notebook: Ipython.notebook.kernel.execute("a=1");
	 
		+ Random Jupyter Knowledge
		
			- %connect_info will give a way to connect a second notebook to connect to the same kernel:
				this can be useful for receiving cell pull requests from students in a second notebook.
				
		
		+ Relevant Code in Jupyter's static/:
		
			main.min.js in a downloaded page at line 45233:
		
			if (that._changed_on_disk_dialog !== null) {
                            // update save callback on the confirmation button
                            that._changed_on_disk_dialog.find('.save-confirm-btn').click(_save);
                            //Rebind Click Event on Reload
                            that._changed_on_disk_dialog.find('.btn-warning').click(function () {window.location.reload()});
                            // redisplay existing dialog
                            that._changed_on_disk_dialog.modal('show');
                        } else {
                          // create new dialog
                          that._changed_on_disk_dialog = dialog.modal({
                            notebook: that,
                            keyboard_manager: that.keyboard_manager,
                            title: i18n.msg._("Notebook changed"),
                            body: i18n.msg._("The notebook file has changed on disk since the last time we opened or saved it. "
                                  + "Do you want to overwrite the file on disk with the version open here, or load "
                                  + "the version on disk (reload the page)?"),
                            buttons: {
                                Reload: {
                                    class: 'btn-warning',
                                    click: function() {
                                        window.location.reload();
                                    }
                                },
							Cancel: {},
                                Overwrite: {
                                    class: 'btn-danger save-confirm-btn',
                                    click: function () {
                                        _save();
                                    }
                                },
                            }
							
		
		

		+ Trying to run load_notebook in console: (these were all failures)
		
			>IPython.Notebook.prototype.load_notebook()
						
				caught in debugger: static/notebook/js/notebook/js/notebook.js
				
				Notebook.prototype.load_notebook = function (notebook_path) {
					this.notebook_path = notebook_path;
				
				where:
				notebook_path = 'student/student-cpr/book1-fix.ipynb'
			
			>IPython.Notebook.prototype.load_notebook('student/student-cpr/book1-fix.ipynb')
			>requirejs("notebook/js/notebook").Notebook.prototype.load_notebook("student/student-cpr/book1-fix.ipynb")
			
			 $.ajax({
				  url: "/static/notebook/js/main.min.js",
				  dataType: "script",
				  success: true
				});
			$.ajax({
			  url: "/static/notebook/js/main.min.js?v=1bc4ae6ca8730320ff059b16de698691",
			  dataType: "script",
			  success: true
			});
			<script src="/static/notebook/js/main.min.js?v=1bc4ae6ca8730320ff059b16de698691" type="text/javascript" charset="utf-8"></script>
		
		12.14
		
		+ how to setup local git server:
		
		in remote/: >mkdir main
						>cd main
						>git init
						>git checkout -b dummy
			
			in student-cpr/ and teacher-cpr:
						>git remote add local /c/Users/wsutt/Desktop/cpr/remote/main
						
			from teacher-cpr/
						>git push local master
						(now, remote should be sync'd with teacher)
						
			to verify sync, in remote/main/:
						>git checkout master
						>ls  (should see all files)
						>git checkout dummy (need to switch back to enable pushing to master)
						
			now sync up student, in student-cpr:
						>git add .
						>git commit -m "add/committing everything tp allow pull"
						>git pull local master
						
		
		+ examples of git operations while notebook is live.
		
			"""
			error: Your local changes to the following files would be overwritten by merge:
				book1.ipynb
				Please commit your changes or stash them before you merge.
				Aborting
			"""
		
		+ how to clone from local? doesn't work as easily as adding a local remote
		
			-> you can just push to a newly init'd folder
		
		+ how do 
		
		+ how to push to a local repo:
			
			This one works:
			example-repo-branch
			in this one, we do:
				(in remote)>git checkout -b dummy
				(in local) >git push local-branch master
				-> now pushed changes are visible in remote once we:
				(in remote) >git checkout master
				but changes aren't visible in dummy branch
				
			
			This didn't really work:
			example-repo (turned to "bare" but files disappear, but log works)
			
			remote: error: refusing to update checked out branch: refs/heads/master
			remote: error: By default, updating the current branch in a non-bare repository
			remote: is denied, because it will make the index and work tree inconsistent
			remote: with what you pushed, and will require 'git reset --hard' to match
			remote: the work tree to HEAD.
			
			troubleshooting:	https://stackoverflow.com/questions/2816369/git-push-error-remote-rejected-master-master-branch-is-currently-checked
		
				in remote do: git config --bool core.bare true
				
			example-repo-branch
		
		12.12
		
		+ even without any actual changes to students, `git diff --stat` returns this...
			"""
			 warning: LF will be replaced by CRLF in book1.ipynb.
			 The file will have its original line endings in your working directory
			"""
			
			- but trying to commit that fails:			
				"""
				nothing to commit, working tree clean
				"""
		
		+ merging fails when student+teacher both make changes, and student's chnages are not committed.
		
				error: Your local changes to the following files would be overwritten by merge:
					book1.ipynb
				Please commit your changes or stash them before you merge.
				Aborting
				Updating 05085cf..e81cbeb
		
			also:
			
				Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.
				
				? what is "fast-forwarding" ?
				
		+ Looks like student's branch get's stuck behind teacher's once he starts merging.
		
			"""
			Your branch is ahead of 'origin/master' by 3 commits.		
			"""
	
	
	
	
	
	
	
	